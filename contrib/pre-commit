#!/bin/bash
#
# for file in $(git diff --diff-filter=d --cached --name-only | grep -E '\.(js|jsx)$')
# do
#   git show ":$file" | node_modules/.bin/eslint --stdin --stdin-filename "$file" # we only want to lint the staged changes, not any un-staged changes
#   if [ $? -ne 0 ]; then
#     echo "ESLint failed on staged file '$file'. Please check your code and try again. You can run ESLint manually via npm run eslint."
#     exit 1 # exit with failure status
#   fi
# done

#!/bin/bash
# PHP CodeSniffer pre-commit hook for git
#
# @author Soenke Ruempler <soenke@ruempler.eu>
# @author Sebastian Kaspari <s.kaspari@googlemail.com>
#
# see the README

GRUNT_BIN=$(which grunt)
ESLINTBIN="./node_modules/.bin/eslint"
COFFEELINTBIN="./node_modules/.bin/coffeelint"

TMP_STAGING="tmp_staging"
JS_FILE_PATTERN="tests/.*\.js$"
COFFEE_FILE_PATTERN="\.coffee$"

# simple check if code sniffer is set up correctly
if [ ! -x $ESLINTBIN ]; then
    echo "NPM eslint bin not found or executable -> $ESLINTBIN"
    exit 1
fi

# simple check if code sniffer is set up correctly
if [ ! -x $COFFEELINTBIN ]; then
    echo "NPM coffeelint bin not found or executable -> $COFFEELINTBIN"
    exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=0430be168338ee74d7f0f78b9b6ecea3fccbffe5
fi

# this is the magic:
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    echo "No files found"
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# match files against whitelist
FILES_TO_CHECK=""
COFFEE_FILES=""
for FILE in $FILES
do
    echo "$FILE" | grep -e "\.min\."
    RETVAL=$?
    if [ "$RETVAL" -eq "1" ]
    then
        echo "$FILE" | grep -e "grunt-contrib-jasmine"
        RETVAL=$?
        if [ "$RETVAL" -eq "1" ]
        then
            echo "$FILE" | grep -q "$JS_FILE_PATTERN"
            RETVAL=$?
            if [ "$RETVAL" -eq "0" ]
            then
                FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
            else
                echo "$FILE" | grep -q -e "$COFFEE_FILE_PATTERN"
                RETVAL=$?
                if [ "$RETVAL" -eq "0" ]
                then
                    COFFEE_FILES="$COFFEE_FILES $FILE"
                fi
            fi
        fi
    fi
done

if [ "$FILES_TO_CHECK" == "" ] && [ "$COFFEE_FILES" == "" ]; then
    echo "No files to check"
    exit 0
fi

# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory
STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)

	echo "processing $FILE"

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done

# OUTPUT=$($PHPCS_BIN -s --standard=$PHPCS_CODING_STANDARD $EXTENSIONS $ENCODING $IGNORE $STAGED_FILES)
# RETVAL=$?
# .html permit .vue in linter
OUPUT=$($ESLINTBIN --ext .js,.html --ignore-pattern "node_modules" --quiet c ./.eslintrc.js --stdin-filename $STAGED_FILES 1>&2)
RETVAL=$?

if [ $RETVAL -ne 0 ]; then
    echo "$OUTPUT"

    # delete temporary copy of staging area
    rm -rf $TMP_STAGING

    exit $RETVAL
fi

rm -rf $TMP_STAGING

STAGED_FILES=""
for FILE in $COFFEE_FILES
do
  ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)

	echo "processing $FILE"

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done

if [ "$COFFEE_FILES" != "" ]; then
    OUPUT=$($COFFEELINTBIN  -f coffeelint.json $STAGED_FILES 1>&2)
    RETVAL=$?

    if [ $RETVAL -ne 0 ]; then
        echo "$OUTPUT"
    fi
fi

# delete temporary copy of staging area
rm -rf $TMP_STAGING && rm -rf $TMP_STAGING

exit $RETVAL
